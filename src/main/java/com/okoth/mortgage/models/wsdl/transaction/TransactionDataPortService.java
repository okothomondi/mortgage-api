package com.okoth.mortgage.models.wsdl.transaction;

import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceException;
import jakarta.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;

/** This class was generated by the JAX-WS RI. JAX-WS RI 2.3.2 Generated source version: 2.2 */
@org.springframework.stereotype.Service
@WebServiceClient(
    name = "TransactionDataPortService",
    targetNamespace = "http://credable.io/cbs/transaction",
    wsdlLocation =
        "file:/home/platform-engineer/GitHub/SpringBoot/CredableLoans/src/main/resources/wsdl/transactionWsdl.wsdl")
public class TransactionDataPortService extends Service {

  private static final URL TRANSACTIONDATAPORTSERVICE_WSDL_LOCATION;
  private static final WebServiceException TRANSACTIONDATAPORTSERVICE_EXCEPTION;
  private static final QName TRANSACTIONDATAPORTSERVICE_QNAME =
      new QName("http://credable.io/cbs/transaction", "TransactionDataPortService");

  static {
    URL url = null;
    WebServiceException e = null;
    try {
      url =
          new URL(
              "file:/home/platform-engineer/GitHub/SpringBoot/CredableLoans/src/main/resources/wsdl/transactionWsdl.wsdl");
    } catch (MalformedURLException ex) {
      e = new WebServiceException(ex);
    }
    TRANSACTIONDATAPORTSERVICE_WSDL_LOCATION = url;
    TRANSACTIONDATAPORTSERVICE_EXCEPTION = e;
  }

  public TransactionDataPortService() {
    super(__getWsdlLocation(), TRANSACTIONDATAPORTSERVICE_QNAME);
  }

  public TransactionDataPortService(WebServiceFeature... features) {
    super(__getWsdlLocation(), TRANSACTIONDATAPORTSERVICE_QNAME, features);
  }

  public TransactionDataPortService(URL wsdlLocation) {
    super(wsdlLocation, TRANSACTIONDATAPORTSERVICE_QNAME);
  }

  public TransactionDataPortService(URL wsdlLocation, WebServiceFeature... features) {
    super(wsdlLocation, TRANSACTIONDATAPORTSERVICE_QNAME, features);
  }

  public TransactionDataPortService(URL wsdlLocation, QName serviceName) {
    super(wsdlLocation, serviceName);
  }

  public TransactionDataPortService(
      URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
    super(wsdlLocation, serviceName, features);
  }

  /**
   * @return returns TransactionDataPort
   */
  @WebEndpoint(name = "TransactionDataPortSoap11")
  public TransactionDataPort getTransactionDataPortSoap11() {
    return super.getPort(
        new QName("http://credable.io/cbs/transaction", "TransactionDataPortSoap11"),
        TransactionDataPort.class);
  }

  /**
   * @param features A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.
   *     Supported features not in the <code>features</code> parameter will have their default
   *     values.
   * @return returns TransactionDataPort
   */
  @WebEndpoint(name = "TransactionDataPortSoap11")
  public TransactionDataPort getTransactionDataPortSoap11(WebServiceFeature... features) {
    return super.getPort(
        new QName("http://credable.io/cbs/transaction", "TransactionDataPortSoap11"),
        TransactionDataPort.class,
        features);
  }

  private static URL __getWsdlLocation() {
    if (TRANSACTIONDATAPORTSERVICE_EXCEPTION != null) {
      throw TRANSACTIONDATAPORTSERVICE_EXCEPTION;
    }
    return TRANSACTIONDATAPORTSERVICE_WSDL_LOCATION;
  }
}
